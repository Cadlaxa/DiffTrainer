lang_code: "Japanese (JP)"
app_ttl: "DiffTrainer"
tab_ttl_1: "バージョン情報"
tab_ttl_2: "データ準備"
tab_ttl_3: "設定"
tab_ttl_4: "前処理とトレーニング"
tab_ttl_5: "シンガーのエクスポート(基本)"
tab_ttl_6: "シンガーのエクスポート(上級)"

# About tab
ver: "バージョン"
install: "フルインストール"
install2: "DiffSinger、Uta's Converter、SOME、Pythonをインストールします。 \n2回目に実行すると、すべてのファイルが削除され、置き換えられます。"
update: "ツールを更新します"
update2: "DiffSinger、Uta's Converter、SOME、Pythonをインストールします。 \n2回目に実行すると、すべてのファイルが削除され、置き換えられます。"
cred_front: "フロントエンド:"
cred_back: "バックエンド:"
restart: "(再起動で適用)"
#注：文字列はこれより長くしてはならない、さもなければカットされる

#Data Prep tab
silperseg: "セグメントごとの最大無音数"
silperseg2: "1つのセグメントでAP/SPをいくつまで許可するか。次の沈黙は新しいセグメントを開始します。\n 次の無音は新しいセグメントを開始します。"
length_sil: "無音の最大長(秒)"
length_sil2: これは正確な値ではないので、必要に応じて短くしたり長くしたりできます。" 
length_sil2: "無音部分の最大長(秒)"
length_seg: "セグメントの最大長(秒)"
length_seg2: "各セグメントが許される長さ。これは正確な値ではないので、必要に応じて短くしたり長くしたりできます \n 推奨値：最低でも5ですが、非常に弱いGPUでは2～4しか処理できないかもしれません。1は推奨されません。"
estmidi: "MIDIを推定する"
estmidi2: "各音素のピッチを計算する。ピッチモデルの学習に必要。"
detbre:  "ブレスを検出する。"
detbre2: "セグメントの呼吸音を考慮しようとする。一貫性のない結果。"
rawdata: "raw_dataフォルダを選択"
rawdata2: ".wavファイルと.labファイルの両方を含む各スピーカーのサブフォルダを持ち、raw_dataの中にある必要があります。"
prepdata: "データを準備する"
prepdata2: "Diffsingerフォーマットのデータを準備するプロセスを実行する。"

#Config tab
type: "Type:"
aco: "Acoustic"
var: "Variance"
adv: "高度: カスタム設定"
adv2: "パラメーターを個別に選択するオプションのロックを解除する。 \n 経験豊富なユーザーのみ推奨。"
datafolder: "フォーマットされたデータフォルダを選択"
datafolder2: "前のタブで処理したフォルダを選択してください。\n 場所はどこでも構いませんが、/diffsinger/dataのサブフォルダを推奨します。"
savefolder: "チェックポイントの保存先フォルダを選択"
savefolder2: "チェックポイントの保存先を選択してください。\n /diffsinger/checkpointsのサブフォルダーでなければいけません。"
confsel: "設定を選択:"
confsel2: "既存の設定リストから選択してください。 \n すべてテスト済みです"
advconfig: "高度な設定:"
advconfig2: "設定を個別に選択します。\n 既存にない組み合わせも可能です。"
saveint: "保存間隔:"
saveint2: "チェックポイントは {saveint} ステップごとに保存されます"
maxbatch: "最大バッチサイズ"
maxbatch2: "トレーニングが一度に処理するファイル数 \n 推奨値はシステムによって大きく異なりますが、acousticは9、varianceは24から始めてみてください。 \n この値はバイナリを再処理することなく変更できます。"
saveconf: "設定を保存する"

#Train tab
step1: "設定を選択"
step1-2: "正しいデータセット用に設定された設定を選択"
step2: "チェックポイントフォルダーを選択"
step2-2: "チェックポイントを保存するフォルダを選択します。これはコンフィギュレーション内のものと一致させる。"
step3a: "データの前処理"
step3a2: "2値化されたデータをトレーニング処理用に準備します。"
step3b: "トレーニング"
warning1: "トレーニング中、このウィンドウは応答しません。"
warning2: "トレーニングを停止するには、コマンドラインウィンドウでCtrl+Cを押してください。"
patchlabel: "オプションパッチ:"
patchbutton: "テンソルコアを使う"
patchtip: "最近のNvidia GPUの場合。トレーニングの最初にテンソルコアの使用に関するメッセージが表示される場合、このパッチを当てることでパフォーマンスが少し改善されるかもしれません。"

#Export tab
##strings 'aco', 'var', and 'step2' are reused
acotip: "acousticチェックポイントをONNXにエクスポート"
vartip: "varianceチェックポイントをONNXにエクスポート."
step2-2alt: "チェックポイントが保存されているフォルダを選択します。 \n フォルダ内の最新のチェックポイントが使用されます"
onnx: "ONNXをエクスポート"
oupatch: "一時パッチボタン(セットアップ/アップデート後に一度だけ実行)"
namebox: "シンガーの名前をスペースや特殊文字なしで入力"
getaco: "acousticのチェックポイントのフォルダを選択"
getaco2: "onnxフォルダではなく、チェックポイントの保存に使用したフォルダを指定してください。"
getvar: "varianceのチェックポイントフォルダを選択"
ousave: "保存先"
ousave2: "最終的なシンガーのフォルダの保存場所を選択します。 \n OpenUTAU/singers フォルダに直接保存することをお勧めします。"
vocoder: "OPTIONAL: カスタムボコーダー"
vocoder2: "デフォルト以外のボコーダーを持つモデルの場合、ここで ONNX ファイルを選択します。"
ouexport: "OpenUtau用に出力"
